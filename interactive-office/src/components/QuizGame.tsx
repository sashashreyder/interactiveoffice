import React, { useState } from "react";

interface Question {
  id: number;
  type: "vocabulary" | "grammar" | "scenario" | "critical_thinking";
  difficulty: "beginner" | "intermediate";
  question: string;
  options: string[];
  correctAnswer: string;
  explanation: string;
  explanationRu: string;
  points: number;
  category: string;
}

interface QuizGameProps {
  questions: Question[];
  onAnswer: (isCorrect: boolean, points: number, questionType: string) => void;
  onBack: () => void;
}

const QuizGame: React.FC<QuizGameProps> = ({ questions, onAnswer, onBack }) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [showRussian, setShowRussian] = useState(false);

  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;

  const handleAnswerSelect = (answer: string) => {
    setSelectedAnswer(answer);
    setShowExplanation(true);
    setShowRussian(false);
    
    const isCorrect = answer === currentQuestion.correctAnswer;
    onAnswer(isCorrect, currentQuestion.points, currentQuestion.type);
  };

  const handleNextQuestion = () => {
    if (isLastQuestion) {
      // Quiz completed
      return;
    }
    
    setCurrentQuestionIndex(prev => prev + 1);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setShowRussian(false);
  };

  const handleFinishQuiz = () => {
    onBack();
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "vocabulary": return "üìö";
      case "grammar": return "‚úèÔ∏è";
      case "critical_thinking": return "üß†";
      default: return "‚ùì";
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "vocabulary": return "#3498db";
      case "grammar": return "#e74c3c";
      case "critical_thinking": return "#9b59b6";
      default: return "#95a5a6";
    }
  };

  const getTypeName = (type: string) => {
    switch (type) {
      case "vocabulary": return "–õ–µ–∫—Å–∏–∫–∞";
      case "grammar": return "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞";
      case "critical_thinking": return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ú—ã—à–ª–µ–Ω–∏–µ";
      default: return "–í–æ–ø—Ä–æ—Å";
    }
  };

  const getCategoryName = (category: string) => {
    const categoryMap: { [key: string]: string } = {
      "Office Items": "–û—Ñ–∏—Å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã",
      "People": "–õ—é–¥–∏",
      "Workplace Actions": "–†–∞–±–æ—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
      "Present Simple": "–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è",
      "Articles": "–ê—Ä—Ç–∏–∫–ª–∏",
      "Demonstratives": "–£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è",
      "There is/There are": "There is/There are",
      "Modal Verbs": "–ú–æ–¥–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã",
      "Future Tense": "–ë—É–¥—É—â–µ–µ –≤—Ä–µ–º—è",
      "Present Continuous": "–ù–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–Ω–æ–µ",
      "Would like to": "Would like to",
      "Countable/Uncountable": "–ò—Å—á–∏—Å–ª—è–µ–º—ã–µ/–ù–µ–∏—Å—á–∏—Å–ª—è–µ–º—ã–µ",
      "Possessive Pronouns": "–ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è",
      "Customer Service": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤",
      "Communication": "–û–±—â–µ–Ω–∏–µ",
      "Professional Behavior": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
      "Teamwork": "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
    };
    
    return categoryMap[category] || category;
  };

  if (currentQuestionIndex >= questions.length) {
    return (
      <div className="quiz-game">
        <div className="quiz-header">
          <h2>üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
          <p>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.</p>
        </div>
        
        <div className="quiz-controls">
          <button onClick={handleFinishQuiz} className="quiz-btn">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="quiz-game">
      <div className="quiz-header">
        <h2>–í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {questions.length}</h2>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</p>
        
        <div className="question-type-badge" style={{ backgroundColor: getTypeColor(currentQuestion.type) }}>
          {getTypeIcon(currentQuestion.type)} {getTypeName(currentQuestion.type)}
        </div>
        
        <div className="question-category">
          –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {getCategoryName(currentQuestion.category)}
        </div>
      </div>

      <div className="question-container">
        <div className="question">
          {currentQuestion.question}
        </div>

        <div className="options-grid">
          {currentQuestion.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(option)}
              disabled={showExplanation}
              className={`option-btn ${
                showExplanation
                  ? option === currentQuestion.correctAnswer
                    ? "correct"
                    : option === selectedAnswer
                    ? "incorrect"
                    : ""
                  : ""
              }`}
            >
              {option}
            </button>
          ))}
        </div>
      </div>

      {showExplanation && (
        <div className="explanation">
          <h4>
            {selectedAnswer === currentQuestion.correctAnswer ? "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" : "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"}
          </h4>
          
          <div className="explanation-content">
            <div className="explanation-english">
              <strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong>
              <p>{currentQuestion.explanation}</p>
            </div>
            
            <div className="explanation-russian">
              <button 
                onClick={() => setShowRussian(!showRussian)} 
                className="russian-toggle-btn"
              >
                {showRussian ? "–°–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"}
              </button>
              
              {showRussian && (
                <div className="russian-text">
                  <strong>–ü–µ—Ä–µ–≤–æ–¥:</strong>
                  <p>{currentQuestion.explanationRu}</p>
                </div>
              )}
            </div>
            
            <div className="points-info">
              {selectedAnswer === currentQuestion.correctAnswer ? (
                <span className="points-earned">
                  +{currentQuestion.points} –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞
                </span>
              ) : (
                <span className="points-lost">
                  0 –æ—á–∫–æ–≤ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
                </span>
              )}
            </div>
          </div>
        </div>
      )}

      <div className="quiz-controls">
        <button onClick={onBack} className="quiz-btn secondary">
          –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        </button>
        
        {showExplanation && (
          <button onClick={handleNextQuestion} className="quiz-btn">
            {isLastQuestion ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" : "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"}
          </button>
        )}
      </div>
    </div>
  );
};

export default QuizGame;
